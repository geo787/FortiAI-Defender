from flask import Flask, jsonify, render_template
import pandas as pd
import numpy as np
from ai.threat_analyzer import analyze_threats
import logging

app = Flask(__name__)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
threats = []

def simulate_quarantine(ip):
    logging.warning(f"Quarantined threat from IP: {ip} at {pd.Timestamp.now().strftime('%H:%M:%S')}")
    return {"status": "quarantined", "ip": ip, "time": pd.Timestamp.now().strftime("%H:%M:%S")}

def detect_threats():
    global threats
    data = pd.DataFrame({
        'src_ip': [f"192.168.1.{i}" for i in np.random.randint(1, 255, 10)],
        'bytes_sent': np.random.randint(100, 10000, 10),
        'packets': np.random.randint(1, 100, 10)
    })
    threats = analyze_threats(data)
    for ip in threats[:5]:
        simulate_quarantine(ip)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/scan')
def scan_network():
    detect_threats()
    responses = [simulate_quarantine(ip) for ip in threats[:5]]
    return jsonify({"threats": len(threats), "responses": responses})

if __name__ == "__main__":
    app.run(debug=True, host='0.0.0.0', port=5000)
